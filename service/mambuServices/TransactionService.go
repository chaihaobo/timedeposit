/*
 * @Author: Hugo
 * @Date: 2022-05-12 10:48:09
 * @Last Modified by: Hugo
 * @Last Modified time: 2022-05-19 11:04:27
 */
package mambuservices

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"gitlab.com/bns-engineering/td/common/constant"
	commonLog "gitlab.com/bns-engineering/td/common/log"
	"gitlab.com/bns-engineering/td/common/util"
	"gitlab.com/bns-engineering/td/dao"
	"gitlab.com/bns-engineering/td/model"
	mambuEntity "gitlab.com/bns-engineering/td/service/mambuEntity"
)

// Get Transaction Info from mambu api with key of account
func GetTransactionByQueryParam(searchParam mambuEntity.SearchParam) ([]mambuEntity.TransactionBrief, error) {
	tmpTransList := []mambuEntity.TransactionBrief{}
	postUrl := constant.SearchTransactionUrl
	commonLog.Log.Debug("postUrl: %v", postUrl)
	queryParamByte, err := json.Marshal(searchParam)
	if err != nil {
		commonLog.Log.Error("Convert searchParam to JsonStr Failed. searchParam: %v", searchParam)
		return tmpTransList, nil
	}
	postJsonStr := string(queryParamByte)
	commonLog.Log.Debug("PostUrl:%v", postUrl)
	commonLog.Log.Debug("postJsonStr:%v", postJsonStr)
	resp, code, err := util.HttpPostData(postJsonStr, postUrl)
	commonLog.Log.Debug("responseStr:%v", resp)

	if err != nil || code != constant.HttpStatusCodeSucceed {
		commonLog.Log.Error("Search td account Info List failed! queryParam: %v", postJsonStr)
		return tmpTransList, err
	}
	commonLog.Log.Debug("Query td account Info result: %v", resp)
	err = json.Unmarshal([]byte(resp), &tmpTransList)
	if err != nil {
		commonLog.Log.Error("Convert Json to TDAccount Failed. json: %v", resp)
		return tmpTransList, err
	}
	return tmpTransList, nil
}

func WithdrawTransaction(tdAccount, benefitAccount mambuEntity.TDAccount,
	nodeLog model.TFlowNodeLog,
	amount float64,
	channelID string) (mambuEntity.TransactionResp, error) {

	transactionID := nodeLog.FlowId + "-" + nodeLog.NodeName + "-" + "Withdraw"
	transactionDetailID := nodeLog.FlowId + "-" + nodeLog.NodeName + "-" + "Withdraw" + "-" + time.Now().Format("20060102150405")
	custMessage := fmt.Sprintf("Withdraw for flowTask: %v, node: %v", nodeLog.FlowId, nodeLog.NodeName)
	tmpTransaction := mambuEntity.TransactionReq{
		Metadata: mambuEntity.TransactionReqMetadata{
			MessageType:                    "TRANSACTION",
			ExternalTransactionID:          transactionID,
			ExternalTransactionDetailID:    transactionDetailID,
			ExternalOriTransactionID:       "",
			ExternalOriTransactionDetailID: "",
			TransactionType:                "49",
			TransactionDateTime:            time.Now().Format("2006-01-02 15:04:05"),
			TerminalType:                   "6021",
			TerminalID:                     "TDE",
			TerminalLocation:               "2006-01-02 15:04:05",
			TerminalRRN:                    "id, generate by terminal TDE-00000001 (unique id generated by TDE)", //TODO:MODIY
			ProductCode:                    "000000",
			AcquirerIID:                    "947",
			ForwarderIID:                   "947",
			IssuerIID:                      "947",
			IssuerlName:                    "Aladin",
			DestinationIID:                 "947",
			SourceAccountNo:                tdAccount.ID,
			SourceAccountName:              tdAccount.Name,
			BeneficiaryAccountNo:           tdAccount.Otherinformation.BhdNomorRekPencairan,
			BeneficiaryAccountName:         tdAccount.Otherinformation.BhdNamaRekPencairan,
			Currency:                       "IDR",
			TranDesc1:                      "Opening Deposito Account",
			TranDesc2:                      custMessage,
			TranDesc3:                      "",
		},
		Amount: amount,
		TransactionDetails: mambuEntity.TransactionReqDetails{
			TransactionChannelID: channelID,
		},
	}
	var transactionResp mambuEntity.TransactionResp
	queryParamByte, err := json.Marshal(tmpTransaction)
	if err != nil {
		commonLog.Log.Error("Convert searchParam to JsonStr Failed. searchParam: %v", queryParamByte)
		dao.CreateFailedTransaction(tmpTransaction, constant.TransactionWithdraw, err.Error())
		return transactionResp, errors.New("build withdraw parameters failed")
	}
	postJsonStr := string(queryParamByte)

	postUrl := fmt.Sprintf(constant.WithdrawTransactiontUrl, tdAccount.ID)
	respBody, code, err := util.HttpPostData(postJsonStr, postUrl)
	if err != nil ||
		code != constant.HttpStatusCodeSucceed ||
		code != constant.HttpStatusCodeSucceedNoContent ||
		code != constant.HttpStatusCodeSucceedCreate {
		commonLog.Log.Error("Withdraw Transaction Error! td acc id: %v, error:%v", tdAccount.ID, respBody)
		dao.CreateFailedTransaction(tmpTransaction, constant.TransactionWithdraw, err.Error())
		return transactionResp, errors.New(respBody)
	}

	commonLog.Log.Debug("Withdraw Transaction for td account succeed. Result: %v", respBody)
	err = json.Unmarshal([]byte(respBody), &transactionResp)
	if err != nil {
		commonLog.Log.Error("Convert Json to TransactionResp Failed. json: %v", respBody)
		dao.CreateFailedTransaction(tmpTransaction, constant.TransactionWithdraw, err.Error())
		return transactionResp, errors.New("mambu process Withdraw Transaction Error, the response data error")
	}
	dao.CreateSucceedFlowTransaction(transactionResp)
	return transactionResp, nil
}

func DepositTransaction(tdAccount, benefitAccount mambuEntity.TDAccount,
	nodeLog model.TFlowNodeLog,
	amount float64,
	channelID string) (mambuEntity.TransactionResp, error) {
	transactionID := nodeLog.FlowId + "-" + nodeLog.NodeName + "-" + "Deposit"
	transactionDetailID := nodeLog.FlowId + "-" + nodeLog.NodeName + "-" + "Deposit" + "-" + time.Now().Format("20060102150405")
	custMessage := fmt.Sprintf("Deposit for flowTask: %v, node: %v", nodeLog.FlowId, nodeLog.NodeName)
	tmpTransaction := mambuEntity.TransactionReq{
		Metadata: mambuEntity.TransactionReqMetadata{
			MessageType:                    "TRANSACTION",
			ExternalTransactionID:          transactionID,
			ExternalTransactionDetailID:    transactionDetailID,
			ExternalOriTransactionID:       "",
			ExternalOriTransactionDetailID: "",
			TransactionType:                "49",
			TransactionDateTime:            time.Now().Format("2006-01-02 15:04:05"),
			TerminalType:                   "6021",
			TerminalID:                     "TDE",
			TerminalLocation:               "2006-01-02 15:04:05",
			TerminalRRN:                    "id, generate by terminal TDE-00000001 (unique id generated by TDE)", //TODO:MODIY
			ProductCode:                    "000000",
			AcquirerIID:                    "947",
			ForwarderIID:                   "947",
			IssuerIID:                      "947",
			IssuerlName:                    "Aladin",
			DestinationIID:                 "947",
			SourceAccountNo:                tdAccount.ID,
			SourceAccountName:              tdAccount.Name,
			BeneficiaryAccountNo:           tdAccount.Otherinformation.BhdNomorRekPencairan,
			BeneficiaryAccountName:         tdAccount.Otherinformation.BhdNamaRekPencairan,
			Currency:                       "IDR",
			TranDesc1:                      "Opening Deposito Account",
			TranDesc2:                      custMessage,
			TranDesc3:                      "",
		},
		Amount: amount,
		TransactionDetails: mambuEntity.TransactionReqDetails{
			TransactionChannelID: channelID,
		},
	}
	var transactionResp mambuEntity.TransactionResp
	queryParamByte, err := json.Marshal(tmpTransaction)
	if err != nil {
		commonLog.Log.Error("Convert searchParam to JsonStr Failed. searchParam: %v", queryParamByte)
		dao.CreateFailedTransaction(tmpTransaction, constant.TransactionWithdraw, err.Error())
		return transactionResp, errors.New("build withdraw parameters failed")
	}
	postJsonStr := string(queryParamByte)

	postUrl := fmt.Sprintf(constant.DepositTransactiontUrl, benefitAccount.ID)
	respBody, code, err := util.HttpPostData(postJsonStr, postUrl)
	if err != nil ||
		code != constant.HttpStatusCodeSucceed ||
		code != constant.HttpStatusCodeSucceedNoContent ||
		code != constant.HttpStatusCodeSucceedCreate {
		commonLog.Log.Error("Deposit Transaction Error! td acc id: %v, error:%v", tdAccount.ID, respBody)
		dao.CreateFailedTransaction(tmpTransaction, constant.TransactionWithdraw, err.Error())
		return transactionResp, errors.New(respBody)
	}

	commonLog.Log.Debug("Deposit Transaction for td account succeed. Result: %v", respBody)
	err = json.Unmarshal([]byte(respBody), &transactionResp)
	if err != nil {
		commonLog.Log.Error("Convert Json to TransactionResp Failed. json: %v", respBody)
		dao.CreateFailedTransaction(tmpTransaction, constant.TransactionWithdraw, err.Error())
		return transactionResp, errors.New("mambu process Deposit Transaction Error, the response data error")
	}

	dao.CreateSucceedFlowTransaction(transactionResp)
	return transactionResp, nil
}
